name: Deploy to EKS

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_TAG: ${{ github.sha }}

jobs:

  # ----------------------------------------
  # STAGE 1: Build Docker Image
  # ----------------------------------------
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and tag image
      id: build
      run: |
        set -e
        ECR_URI=$(aws ecr describe-repositories \
          --repository-names ${{ secrets.ECR_REPOSITORY }} \
          --region ${{ secrets.AWS_REGION }} \
          --query 'repositories[0].repositoryUri' \
          --output text)
        echo "ECR_URI=$ECR_URI"
        echo "ECR_URI=$ECR_URI" >> $GITHUB_OUTPUT
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
        docker build -t $ECR_URI:$IMAGE_TAG .

    - name: Upload image info as artifact
      run: |
        echo "ECR_URI=${{ steps.build.outputs.ECR_URI }}" > image-info.txt
        echo "IMAGE_TAG=${{ steps.build.outputs.IMAGE_TAG }}" >> image-info.txt
      shell: bash

    - uses: actions/upload-artifact@v3
      with:
        name: image-metadata
        path: image-info.txt


  # ----------------------------------------
  # STAGE 2: Push to ECR
  # ----------------------------------------
  push:
    name: Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: image-metadata
        path: .

    - name: Load image metadata
      run: |
        source image-info.txt
        echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      shell: bash

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Push image to ECR
      run: |
        docker push $ECR_URI:$IMAGE_TAG


  # ----------------------------------------
  # STAGE 3: Deploy to EKS
  # ----------------------------------------
  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: push

    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v3
      with:
        name: image-metadata
        path: .

    - name: Load image metadata
      run: |
        source image-info.txt
        echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "ECR_IMAGE=$ECR_URI:$IMAGE_TAG" >> $GITHUB_ENV
      shell: bash

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: v1.30.1

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig \
          --region ${{ secrets.AWS_REGION }} \
          --name ${{ secrets.CLUSTER_NAME }}

    - name: Deploy to EKS
      run: |
        sed "s|<ECR_IMAGE_URI>|${{ env.ECR_IMAGE }}|g" deployment.yaml > deployment-final.yaml
        kubectl apply -f deployment-final.yaml
        kubectl apply -f service.yaml
